package io.tolgee.service.dataImport.processors

import io.tolgee.dtos.dataImport.ImportFileDto
import java.util.zip.ZipEntry
import java.util.zip.ZipInputStream

class ZipTypeProcessor : ImportArchiveProcessor {
  companion object {
    val IGNORE_PREFIXES = arrayOf("__", ".")
  }

  override fun process(file: ImportFileDto): Collection<ImportFileDto> {
    val zipInputStream = ZipInputStream(file.data.inputStream())
    var nextEntry: ZipEntry?
    // .zip archives generated by MacOs compress feature return duplicities
    // I am removing them here by adding the files to map
    val files = mutableMapOf<String, ImportFileDto>()
    while (zipInputStream.nextEntry.also { nextEntry = it } != null) {
      val fileName = nextEntry?.name?.replaceRootSlash() ?: continue

      if (files.contains(fileName)) {
        continue
      }

      if (!IGNORE_PREFIXES.any { fileName.startsWith(it) }) {
        val data = zipInputStream.readAllBytes()
        if (data.isEmpty()) {
          continue
        }
        files[fileName] =
          ImportFileDto(
            name = fileName,
            data = data,
          )
      }
    }
    return files.values.sortedBy { it.name }
  }

  private fun String.replaceRootSlash() = this.replace("^/".toRegex(), "")
}
